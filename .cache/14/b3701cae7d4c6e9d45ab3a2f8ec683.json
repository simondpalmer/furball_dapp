{"id":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","dependencies":[{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\package.json","includedInParent":true,"mtime":1612734035267},{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@ceramicnetwork\\common\\node_modules\\multicodec\\package.json","includedInParent":true,"mtime":1612644319761},{"name":"./base-table","loc":{"line":6,"column":30},"parent":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@ceramicnetwork\\common\\node_modules\\multicodec\\src\\int-table.js","resolved":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@ceramicnetwork\\common\\node_modules\\multicodec\\src\\base-table.js"}],"generated":{"js":"'use strict'\n\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecNumber} CodecNumber */\n\nconst { baseTable } = require('./base-table')\n\n/**\n * @type {Map<CodecNumber,CodecName>}\n */\nconst nameTable = new Map()\n\nfor (const encodingName in baseTable) {\n  const code = baseTable[encodingName]\n  nameTable.set(code, /** @type {CodecName} */(encodingName))\n}\n\nmodule.exports = Object.freeze(nameTable)\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}}],"sources":{"../node_modules/@ceramicnetwork/common/node_modules/multicodec/src/int-table.js":"'use strict'\n\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecNumber} CodecNumber */\n\nconst { baseTable } = require('./base-table')\n\n/**\n * @type {Map<CodecNumber,CodecName>}\n */\nconst nameTable = new Map()\n\nfor (const encodingName in baseTable) {\n  const code = baseTable[encodingName]\n  nameTable.set(code, /** @type {CodecName} */(encodingName))\n}\n\nmodule.exports = Object.freeze(nameTable)\n"},"lineCount":19}},"error":null,"hash":"308bb455537f25e5df07cc7cb7ebef04","cacheData":{"env":{}}}