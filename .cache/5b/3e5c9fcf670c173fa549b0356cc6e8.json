{"id":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","dependencies":[{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\package.json","includedInParent":true,"mtime":1612734035267},{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\dag-jose-utils\\node_modules\\multihashing-async\\node_modules\\uint8arrays\\package.json","includedInParent":true,"mtime":1612644319723},{"name":"multibase","loc":{"line":3,"column":39},"parent":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\dag-jose-utils\\node_modules\\multihashing-async\\node_modules\\uint8arrays\\from-string.js","resolved":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\dag-jose-utils\\node_modules\\multibase\\src\\index.js"},{"name":"web-encoding","loc":{"line":4,"column":32},"parent":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\dag-jose-utils\\node_modules\\multihashing-async\\node_modules\\uint8arrays\\from-string.js","resolved":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\web-encoding\\src\\lib.browser.js"}],"generated":{"js":"'use strict'\n\nconst { encoding: getCodec } = require('multibase')\nconst { TextEncoder } = require('web-encoding')\nconst utf8Encoder = new TextEncoder()\n\n/**\n * @typedef {import('multibase/src/types').BaseName} BaseName\n */\n\n/**\n * Interprets each character in a string as a byte and\n * returns a Uint8Array of those bytes.\n *\n * @param {string} string - The string to turn into an array\n */\nfunction asciiStringToUint8Array (string) {\n  const array = new Uint8Array(string.length)\n\n  for (let i = 0; i < string.length; i++) {\n    array[i] = string.charCodeAt(i)\n  }\n\n  return array\n}\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {string} string\n * @param {BaseName | 'utf8' | 'utf-8' | 'ascii'} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n */\nfunction fromString (string, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Encoder.encode(string)\n  }\n\n  if (encoding === 'ascii') {\n    return asciiStringToUint8Array(string)\n  }\n\n  return getCodec(encoding).decode(string)\n}\n\nmodule.exports = fromString\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}}],"sources":{"../node_modules/dag-jose-utils/node_modules/multihashing-async/node_modules/uint8arrays/from-string.js":"'use strict'\n\nconst { encoding: getCodec } = require('multibase')\nconst { TextEncoder } = require('web-encoding')\nconst utf8Encoder = new TextEncoder()\n\n/**\n * @typedef {import('multibase/src/types').BaseName} BaseName\n */\n\n/**\n * Interprets each character in a string as a byte and\n * returns a Uint8Array of those bytes.\n *\n * @param {string} string - The string to turn into an array\n */\nfunction asciiStringToUint8Array (string) {\n  const array = new Uint8Array(string.length)\n\n  for (let i = 0; i < string.length; i++) {\n    array[i] = string.charCodeAt(i)\n  }\n\n  return array\n}\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {string} string\n * @param {BaseName | 'utf8' | 'utf-8' | 'ascii'} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n */\nfunction fromString (string, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Encoder.encode(string)\n  }\n\n  if (encoding === 'ascii') {\n    return asciiStringToUint8Array(string)\n  }\n\n  return getCodec(encoding).decode(string)\n}\n\nmodule.exports = fromString\n"},"lineCount":51}},"error":null,"hash":"87adfbfb41b004c91b7a59b7385f8ea2","cacheData":{"env":{}}}