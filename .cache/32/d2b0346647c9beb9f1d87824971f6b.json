{"id":"../node_modules/ipfs-block/node_modules/multicodec/src/int-table.js","dependencies":[{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\package.json","includedInParent":true,"mtime":1612810221615},{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\ipfs-block\\node_modules\\multicodec\\package.json","includedInParent":true,"mtime":1612592559629},{"name":"./base-table.json","loc":{"line":2,"column":26},"parent":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\ipfs-block\\node_modules\\multicodec\\src\\int-table.js","resolved":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\ipfs-block\\node_modules\\multicodec\\src\\base-table.json"}],"generated":{"js":"'use strict'\nconst baseTable = require('./base-table.json')\n\n// map for hexString -> codecName\nconst nameTable = new Map()\n\nfor (const encodingName in baseTable) {\n  const code = baseTable[encodingName]\n  nameTable.set(code, encodingName)\n}\n\nmodule.exports = Object.freeze(nameTable)\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-block/node_modules/multicodec/src/int-table.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-block/node_modules/multicodec/src/int-table.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-block/node_modules/multicodec/src/int-table.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-block/node_modules/multicodec/src/int-table.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-block/node_modules/multicodec/src/int-table.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-block/node_modules/multicodec/src/int-table.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-block/node_modules/multicodec/src/int-table.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-block/node_modules/multicodec/src/int-table.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-block/node_modules/multicodec/src/int-table.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-block/node_modules/multicodec/src/int-table.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-block/node_modules/multicodec/src/int-table.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-block/node_modules/multicodec/src/int-table.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-block/node_modules/multicodec/src/int-table.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}}],"sources":{"../node_modules/ipfs-block/node_modules/multicodec/src/int-table.js":"'use strict'\nconst baseTable = require('./base-table.json')\n\n// map for hexString -> codecName\nconst nameTable = new Map()\n\nfor (const encodingName in baseTable) {\n  const code = baseTable[encodingName]\n  nameTable.set(code, encodingName)\n}\n\nmodule.exports = Object.freeze(nameTable)\n"},"lineCount":13}},"error":null,"hash":"9ccbbe1b97dfde9f947bb61ed2ad4e47","cacheData":{"env":{}}}