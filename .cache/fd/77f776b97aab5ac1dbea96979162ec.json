{"id":"../node_modules/uint8arrays/compare.js","dependencies":[{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\package.json","includedInParent":true,"mtime":1612734035267},{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\uint8arrays\\package.json","includedInParent":true,"mtime":1612644319657}],"generated":{"js":"'use strict'\n\n/**\n * Can be used with Array.sort to sort and array with Uint8Array entries\n *\n * @param {Uint8Array} a\n * @param {Uint8Array} b\n */\nfunction compare (a, b) {\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] < b[i]) {\n      return -1\n    }\n\n    if (a[i] > b[i]) {\n      return 1\n    }\n  }\n\n  if (a.byteLength > b.byteLength) {\n    return 1\n  }\n\n  if (a.byteLength < b.byteLength) {\n    return -1\n  }\n\n  return 0\n}\n\nmodule.exports = compare\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/uint8arrays/compare.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/uint8arrays/compare.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}}],"sources":{"../node_modules/uint8arrays/compare.js":"'use strict'\n\n/**\n * Can be used with Array.sort to sort and array with Uint8Array entries\n *\n * @param {Uint8Array} a\n * @param {Uint8Array} b\n */\nfunction compare (a, b) {\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] < b[i]) {\n      return -1\n    }\n\n    if (a[i] > b[i]) {\n      return 1\n    }\n  }\n\n  if (a.byteLength > b.byteLength) {\n    return 1\n  }\n\n  if (a.byteLength < b.byteLength) {\n    return -1\n  }\n\n  return 0\n}\n\nmodule.exports = compare\n"},"lineCount":32}},"error":null,"hash":"ed38704ddd7acc1aa95e7b114e6c1e7d","cacheData":{"env":{}}}