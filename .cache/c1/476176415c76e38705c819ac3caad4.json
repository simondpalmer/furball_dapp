{"id":"../node_modules/@stablelib/xchacha20/lib/xchacha20.js","dependencies":[{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@stablelib\\xchacha20\\lib\\xchacha20.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@stablelib\\xchacha20\\xchacha20.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\package.json","includedInParent":true,"mtime":1612734035267},{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@stablelib\\xchacha20\\package.json","includedInParent":true,"mtime":1612644319468},{"name":"@stablelib/binary","loc":{"line":8,"column":23},"parent":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@stablelib\\xchacha20\\lib\\xchacha20.js","resolved":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@stablelib\\binary\\lib\\binary.js"},{"name":"@stablelib/wipe","loc":{"line":9,"column":21},"parent":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@stablelib\\xchacha20\\lib\\xchacha20.js","resolved":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@stablelib\\wipe\\lib\\wipe.js"},{"name":"@stablelib/chacha","loc":{"line":10,"column":23},"parent":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@stablelib\\xchacha20\\lib\\xchacha20.js","resolved":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@stablelib\\chacha\\lib\\chacha.js"}],"generated":{"js":"\"use strict\";\n// Copyright (C) 2019 Kyle Den Hartog\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Package xchacha20 implements XChaCha20 stream cipher.\n */\nvar binary_1 = require(\"@stablelib/binary\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nvar chacha_1 = require(\"@stablelib/chacha\");\n// Number of ChaCha rounds (ChaCha20).\nvar ROUNDS = 20;\n/**\n * Encrypt src with XChaCha20 stream generated for the given 32-byte key and\n * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and\n * write the result into dst and return it.\n *\n * dst and src may be the same, but otherwise must not overlap.\n *\n * Nonce length is set in such a way that given it's generated via a CSPRNG\n * then there's little concern of collision for roughly 2^96 messages while\n * reusing a secret key and not encountering nonce reuse vulnerabilities.\n */\nfunction streamXOR(key, nonce, src, dst) {\n    if (nonce.length !== 24) {\n        throw new Error(\"XChaCha20 nonce must be 24 bytes\");\n    }\n    // Use HChaCha one-way function to transform first 16 bytes of\n    // 24-byte extended nonce and key into a new key for Salsa\n    // stream -- \"subkey\".\n    var subkey = hchacha(key, nonce.subarray(0, 16), new Uint8Array(32));\n    // Use last 8 bytes of 24-byte extended nonce as an actual nonce prefixed by 4 zero bytes,\n    // and a subkey derived in the previous step as key to encrypt.\n    var modifiedNonce = new Uint8Array(12);\n    modifiedNonce.set(nonce.subarray(16), 4);\n    // If nonceInplaceCounterLength > 0, we'll still pass the correct\n    // nonce || counter, as we don't limit the end of nonce subarray.\n    var result = chacha_1.streamXOR(subkey, modifiedNonce, src, dst);\n    // Clean subkey.\n    wipe_1.wipe(subkey);\n    return result;\n}\nexports.streamXOR = streamXOR;\n/**\n * Generate XChaCha20 stream for the given 32-byte key and 12-byte\n * nonce (last 8 bytes of 24 byte nonce prefixed with 4 zero bytes)\n * and write it into dst and return it.\n *\n * Nonces MUST be generated using an CSPRNG to generate a sufficiently\n * random nonce such that a collision is highly unlikely to occur.\n *\n * stream is like streamXOR with all-zero src.\n */\nfunction stream(key, nonce, dst) {\n    wipe_1.wipe(dst);\n    return streamXOR(key, nonce, dst, dst);\n}\nexports.stream = stream;\n/**\n * HChaCha is a one-way function used in XChaCha to extend nonce.\n *\n * It takes 32-byte key and 16-byte src and writes 32-byte result\n * into dst and returns it.\n */\nfunction hchacha(key, src, dst) {\n    var j0 = 0x61707865; // \"expa\"  -- ChaCha's \"sigma\" constant\n    var j1 = 0x3320646e; // \"nd 3\"     for 32-byte keys\n    var j2 = 0x79622d32; // \"2-by\"\n    var j3 = 0x6b206574; // \"te k\"\n    var j4 = (key[3] << 24) | (key[2] << 16) | (key[1] << 8) | key[0];\n    var j5 = (key[7] << 24) | (key[6] << 16) | (key[5] << 8) | key[4];\n    var j6 = (key[11] << 24) | (key[10] << 16) | (key[9] << 8) | key[8];\n    var j7 = (key[15] << 24) | (key[14] << 16) | (key[13] << 8) | key[12];\n    var j8 = (key[19] << 24) | (key[18] << 16) | (key[17] << 8) | key[16];\n    var j9 = (key[23] << 24) | (key[22] << 16) | (key[21] << 8) | key[20];\n    var j10 = (key[27] << 24) | (key[26] << 16) | (key[25] << 8) | key[24];\n    var j11 = (key[31] << 24) | (key[30] << 16) | (key[29] << 8) | key[28];\n    var j12 = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];\n    var j13 = (src[7] << 24) | (src[6] << 16) | (src[5] << 8) | src[4];\n    var j14 = (src[11] << 24) | (src[10] << 16) | (src[9] << 8) | src[8];\n    var j15 = (src[15] << 24) | (src[14] << 16) | (src[13] << 8) | src[12];\n    var x0 = j0;\n    var x1 = j1;\n    var x2 = j2;\n    var x3 = j3;\n    var x4 = j4;\n    var x5 = j5;\n    var x6 = j6;\n    var x7 = j7;\n    var x8 = j8;\n    var x9 = j9;\n    var x10 = j10;\n    var x11 = j11;\n    var x12 = j12;\n    var x13 = j13;\n    var x14 = j14;\n    var x15 = j15;\n    for (var i = 0; i < ROUNDS; i += 2) {\n        x0 = (x0 + x4) | 0;\n        x12 ^= x0;\n        x12 = (x12 >>> (32 - 16)) | (x12 << 16);\n        x8 = (x8 + x12) | 0;\n        x4 ^= x8;\n        x4 = (x4 >>> (32 - 12)) | (x4 << 12);\n        x1 = (x1 + x5) | 0;\n        x13 ^= x1;\n        x13 = (x13 >>> (32 - 16)) | (x13 << 16);\n        x9 = (x9 + x13) | 0;\n        x5 ^= x9;\n        x5 = (x5 >>> (32 - 12)) | (x5 << 12);\n        x2 = (x2 + x6) | 0;\n        x14 ^= x2;\n        x14 = (x14 >>> (32 - 16)) | (x14 << 16);\n        x10 = (x10 + x14) | 0;\n        x6 ^= x10;\n        x6 = (x6 >>> (32 - 12)) | (x6 << 12);\n        x3 = (x3 + x7) | 0;\n        x15 ^= x3;\n        x15 = (x15 >>> (32 - 16)) | (x15 << 16);\n        x11 = (x11 + x15) | 0;\n        x7 ^= x11;\n        x7 = (x7 >>> (32 - 12)) | (x7 << 12);\n        x2 = (x2 + x6) | 0;\n        x14 ^= x2;\n        x14 = (x14 >>> (32 - 8)) | (x14 << 8);\n        x10 = (x10 + x14) | 0;\n        x6 ^= x10;\n        x6 = (x6 >>> (32 - 7)) | (x6 << 7);\n        x3 = (x3 + x7) | 0;\n        x15 ^= x3;\n        x15 = (x15 >>> (32 - 8)) | (x15 << 8);\n        x11 = (x11 + x15) | 0;\n        x7 ^= x11;\n        x7 = (x7 >>> (32 - 7)) | (x7 << 7);\n        x1 = (x1 + x5) | 0;\n        x13 ^= x1;\n        x13 = (x13 >>> (32 - 8)) | (x13 << 8);\n        x9 = (x9 + x13) | 0;\n        x5 ^= x9;\n        x5 = (x5 >>> (32 - 7)) | (x5 << 7);\n        x0 = (x0 + x4) | 0;\n        x12 ^= x0;\n        x12 = (x12 >>> (32 - 8)) | (x12 << 8);\n        x8 = (x8 + x12) | 0;\n        x4 ^= x8;\n        x4 = (x4 >>> (32 - 7)) | (x4 << 7);\n        x0 = (x0 + x5) | 0;\n        x15 ^= x0;\n        x15 = (x15 >>> (32 - 16)) | (x15 << 16);\n        x10 = (x10 + x15) | 0;\n        x5 ^= x10;\n        x5 = (x5 >>> (32 - 12)) | (x5 << 12);\n        x1 = (x1 + x6) | 0;\n        x12 ^= x1;\n        x12 = (x12 >>> (32 - 16)) | (x12 << 16);\n        x11 = (x11 + x12) | 0;\n        x6 ^= x11;\n        x6 = (x6 >>> (32 - 12)) | (x6 << 12);\n        x2 = (x2 + x7) | 0;\n        x13 ^= x2;\n        x13 = (x13 >>> (32 - 16)) | (x13 << 16);\n        x8 = (x8 + x13) | 0;\n        x7 ^= x8;\n        x7 = (x7 >>> (32 - 12)) | (x7 << 12);\n        x3 = (x3 + x4) | 0;\n        x14 ^= x3;\n        x14 = (x14 >>> (32 - 16)) | (x14 << 16);\n        x9 = (x9 + x14) | 0;\n        x4 ^= x9;\n        x4 = (x4 >>> (32 - 12)) | (x4 << 12);\n        x2 = (x2 + x7) | 0;\n        x13 ^= x2;\n        x13 = (x13 >>> (32 - 8)) | (x13 << 8);\n        x8 = (x8 + x13) | 0;\n        x7 ^= x8;\n        x7 = (x7 >>> (32 - 7)) | (x7 << 7);\n        x3 = (x3 + x4) | 0;\n        x14 ^= x3;\n        x14 = (x14 >>> (32 - 8)) | (x14 << 8);\n        x9 = (x9 + x14) | 0;\n        x4 ^= x9;\n        x4 = (x4 >>> (32 - 7)) | (x4 << 7);\n        x1 = (x1 + x6) | 0;\n        x12 ^= x1;\n        x12 = (x12 >>> (32 - 8)) | (x12 << 8);\n        x11 = (x11 + x12) | 0;\n        x6 ^= x11;\n        x6 = (x6 >>> (32 - 7)) | (x6 << 7);\n        x0 = (x0 + x5) | 0;\n        x15 ^= x0;\n        x15 = (x15 >>> (32 - 8)) | (x15 << 8);\n        x10 = (x10 + x15) | 0;\n        x5 ^= x10;\n        x5 = (x5 >>> (32 - 7)) | (x5 << 7);\n    }\n    binary_1.writeUint32LE(x0, dst, 0);\n    binary_1.writeUint32LE(x1, dst, 4);\n    binary_1.writeUint32LE(x2, dst, 8);\n    binary_1.writeUint32LE(x3, dst, 12);\n    binary_1.writeUint32LE(x12, dst, 16);\n    binary_1.writeUint32LE(x13, dst, 20);\n    binary_1.writeUint32LE(x14, dst, 24);\n    binary_1.writeUint32LE(x15, dst, 28);\n    return dst;\n}\nexports.hchacha = hchacha;\n"},"sourceMaps":{"js":{"version":3,"file":"xchacha20.js","sourceRoot":"","sources":["../xchacha20.ts"],"names":[],"mappings":";AAAA,qCAAqC;AACrC,6CAA6C;;AAE7C;;GAEG;AAEH,4CAAkD;AAClD,wCAAuC;AACvC,4CAAiE;AAEjE,sCAAsC;AACtC,IAAM,MAAM,GAAG,EAAE,CAAC;AAElB;;;;;;;;;;GAUG;AACH,SAAgB,SAAS,CAAC,GAAe,EAAE,KAAiB,EAAE,GAAe,EACzE,GAAe;IACf,IAAI,KAAK,CAAC,MAAM,KAAK,EAAE,EAAE;QACrB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;KACvD;IAED,8DAA8D;IAC9D,0DAA0D;IAC1D,sBAAsB;IACtB,IAAM,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;IAGvE,0FAA0F;IAC1F,+DAA+D;IAC/D,IAAM,aAAa,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC;IACzC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACzC,iEAAiE;IACjE,iEAAiE;IACjE,IAAM,MAAM,GAAG,kBAAe,CAAC,MAAM,EAAE,aAAa,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAEhE,gBAAgB;IAChB,WAAI,CAAC,MAAM,CAAC,CAAC;IAEb,OAAO,MAAM,CAAC;AAClB,CAAC;AAxBD,8BAwBC;AAED;;;;;;;;;GASG;AACH,SAAgB,MAAM,CAAC,GAAe,EAAE,KAAiB,EACrD,GAAe;IACf,WAAI,CAAC,GAAG,CAAC,CAAC;IACV,OAAO,SAAS,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAC3C,CAAC;AAJD,wBAIC;AAED;;;;;GAKG;AACH,SAAgB,OAAO,CACnB,GAAe,EACf,GAAe,EACf,GAAe;IAEf,IAAI,EAAE,GAAG,UAAU,CAAC,CAAC,uCAAuC;IAC5D,IAAI,EAAE,GAAG,UAAU,CAAC,CAAC,8BAA8B;IACnD,IAAI,EAAE,GAAG,UAAU,CAAC,CAAC,SAAS;IAC9B,IAAI,EAAE,GAAG,UAAU,CAAC,CAAC,SAAS;IAC9B,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IAClE,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IAClE,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IACpE,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;IACtE,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;IACtE,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;IACtE,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;IACvE,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;IACvE,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IACnE,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IACnE,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IACrE,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;IAEvE,IAAI,EAAE,GAAG,EAAE,CAAC;IACZ,IAAI,EAAE,GAAG,EAAE,CAAC;IACZ,IAAI,EAAE,GAAG,EAAE,CAAC;IACZ,IAAI,EAAE,GAAG,EAAE,CAAC;IACZ,IAAI,EAAE,GAAG,EAAE,CAAC;IACZ,IAAI,EAAE,GAAG,EAAE,CAAC;IACZ,IAAI,EAAE,GAAG,EAAE,CAAC;IACZ,IAAI,EAAE,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","sourcesContent":["// Copyright (C) 2019 Kyle Den Hartog\n// MIT License. See LICENSE file for details.\n\n/**\n * Package xchacha20 implements XChaCha20 stream cipher.\n */\n\nimport { writeUint32LE } from \"@stablelib/binary\";\nimport { wipe } from \"@stablelib/wipe\";\nimport { streamXOR as chachaStreamXOR } from \"@stablelib/chacha\";\n\n// Number of ChaCha rounds (ChaCha20).\nconst ROUNDS = 20;\n\n/**\n * Encrypt src with XChaCha20 stream generated for the given 32-byte key and\n * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and\n * write the result into dst and return it.\n *\n * dst and src may be the same, but otherwise must not overlap.\n *\n * Nonce length is set in such a way that given it's generated via a CSPRNG\n * then there's little concern of collision for roughly 2^96 messages while\n * reusing a secret key and not encountering nonce reuse vulnerabilities.\n */\nexport function streamXOR(key: Uint8Array, nonce: Uint8Array, src: Uint8Array,\n    dst: Uint8Array): Uint8Array {\n    if (nonce.length !== 24) {\n        throw new Error(\"XChaCha20 nonce must be 24 bytes\");\n    }\n\n    // Use HChaCha one-way function to transform first 16 bytes of\n    // 24-byte extended nonce and key into a new key for Salsa\n    // stream -- \"subkey\".\n    const subkey = hchacha(key, nonce.subarray(0, 16), new Uint8Array(32));\n\n\n    // Use last 8 bytes of 24-byte extended nonce as an actual nonce prefixed by 4 zero bytes,\n    // and a subkey derived in the previous step as key to encrypt.\n    const modifiedNonce = new Uint8Array(12);\n    modifiedNonce.set(nonce.subarray(16), 4);\n    // If nonceInplaceCounterLength > 0, we'll still pass the correct\n    // nonce || counter, as we don't limit the end of nonce subarray.\n    const result = chachaStreamXOR(subkey, modifiedNonce, src, dst);\n\n    // Clean subkey.\n    wipe(subkey);\n\n    return result;\n}\n\n/**\n * Generate XChaCha20 stream for the given 32-byte key and 12-byte\n * nonce (last 8 bytes of 24 byte nonce prefixed with 4 zero bytes)\n * and write it into dst and return it.\n *\n * Nonces MUST be generated using an CSPRNG to generate a sufficiently\n * random nonce such that a collision is highly unlikely to occur.\n *\n * stream is like streamXOR with all-zero src.\n */\nexport function stream(key: Uint8Array, nonce: Uint8Array,\n    dst: Uint8Array): Uint8Array {\n    wipe(dst);\n    return streamXOR(key, nonce, dst, dst);\n}\n\n/**\n * HChaCha is a one-way function used in XChaCha to extend nonce.\n *\n * It takes 32-byte key and 16-byte src and writes 32-byte result\n * into dst and returns it.\n */\nexport function hchacha(\n    key: Uint8Array,\n    src: Uint8Array,\n    dst: Uint8Array\n): Uint8Array {\n    let j0 = 0x61707865; // \"expa\"  -- ChaCha's \"sigma\" constant\n    let j1 = 0x3320646e; // \"nd 3\"     for 32-byte keys\n    let j2 = 0x79622d32; // \"2-by\"\n    let j3 = 0x6b206574; // \"te k\"\n    let j4 = (key[3] << 24) | (key[2] << 16) | (key[1] << 8) | key[0];\n    let j5 = (key[7] << 24) | (key[6] << 16) | (key[5] << 8) | key[4];\n    let j6 = (key[11] << 24) | (key[10] << 16) | (key[9] << 8) | key[8];\n    let j7 = (key[15] << 24) | (key[14] << 16) | (key[13] << 8) | key[12];\n    let j8 = (key[19] << 24) | (key[18] << 16) | (key[17] << 8) | key[16];\n    let j9 = (key[23] << 24) | (key[22] << 16) | (key[21] << 8) | key[20];\n    let j10 = (key[27] << 24) | (key[26] << 16) | (key[25] << 8) | key[24];\n    let j11 = (key[31] << 24) | (key[30] << 16) | (key[29] << 8) | key[28];\n    let j12 = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];\n    let j13 = (src[7] << 24) | (src[6] << 16) | (src[5] << 8) | src[4];\n    let j14 = (src[11] << 24) | (src[10] << 16) | (src[9] << 8) | src[8];\n    let j15 = (src[15] << 24) | (src[14] << 16) | (src[13] << 8) | src[12];\n\n    let x0 = j0;\n    let x1 = j1;\n    let x2 = j2;\n    let x3 = j3;\n    let x4 = j4;\n    let x5 = j5;\n    let x6 = j6;\n    let x7 = j7;\n    let x8 = j8;\n    let x9 = j9;\n    let x10 = j10;\n    let x11 = j11;\n    let x12 = j12;\n    let x13 = j13;\n    let x14 = j14;\n    let x15 = j15;\n\n    for (let i = 0; i < ROUNDS; i += 2) {\n        x0 = (x0 + x4) | 0;\n        x12 ^= x0;\n        x12 = (x12 >>> (32 - 16)) | (x12 << 16);\n        x8 = (x8 + x12) | 0;\n        x4 ^= x8;\n        x4 = (x4 >>> (32 - 12)) | (x4 << 12);\n        x1 = (x1 + x5) | 0;\n        x13 ^= x1;\n        x13 = (x13 >>> (32 - 16)) | (x13 << 16);\n        x9 = (x9 + x13) | 0;\n        x5 ^= x9;\n        x5 = (x5 >>> (32 - 12)) | (x5 << 12);\n\n        x2 = (x2 + x6) | 0;\n        x14 ^= x2;\n        x14 = (x14 >>> (32 - 16)) | (x14 << 16);\n        x10 = (x10 + x14) | 0;\n        x6 ^= x10;\n        x6 = (x6 >>> (32 - 12)) | (x6 << 12);\n        x3 = (x3 + x7) | 0;\n        x15 ^= x3;\n        x15 = (x15 >>> (32 - 16)) | (x15 << 16);\n        x11 = (x11 + x15) | 0;\n        x7 ^= x11;\n        x7 = (x7 >>> (32 - 12)) | (x7 << 12);\n\n        x2 = (x2 + x6) | 0;\n        x14 ^= x2;\n        x14 = (x14 >>> (32 - 8)) | (x14 << 8);\n        x10 = (x10 + x14) | 0;\n        x6 ^= x10;\n        x6 = (x6 >>> (32 - 7)) | (x6 << 7);\n        x3 = (x3 + x7) | 0;\n        x15 ^= x3;\n        x15 = (x15 >>> (32 - 8)) | (x15 << 8);\n        x11 = (x11 + x15) | 0;\n        x7 ^= x11;\n        x7 = (x7 >>> (32 - 7)) | (x7 << 7);\n\n        x1 = (x1 + x5) | 0;\n        x13 ^= x1;\n        x13 = (x13 >>> (32 - 8)) | (x13 << 8);\n        x9 = (x9 + x13) | 0;\n        x5 ^= x9;\n        x5 = (x5 >>> (32 - 7)) | (x5 << 7);\n        x0 = (x0 + x4) | 0;\n        x12 ^= x0;\n        x12 = (x12 >>> (32 - 8)) | (x12 << 8);\n        x8 = (x8 + x12) | 0;\n        x4 ^= x8;\n        x4 = (x4 >>> (32 - 7)) | (x4 << 7);\n\n        x0 = (x0 + x5) | 0;\n        x15 ^= x0;\n        x15 = (x15 >>> (32 - 16)) | (x15 << 16);\n        x10 = (x10 + x15) | 0;\n        x5 ^= x10;\n        x5 = (x5 >>> (32 - 12)) | (x5 << 12);\n        x1 = (x1 + x6) | 0;\n        x12 ^= x1;\n        x12 = (x12 >>> (32 - 16)) | (x12 << 16);\n        x11 = (x11 + x12) | 0;\n        x6 ^= x11;\n        x6 = (x6 >>> (32 - 12)) | (x6 << 12);\n\n        x2 = (x2 + x7) | 0;\n        x13 ^= x2;\n        x13 = (x13 >>> (32 - 16)) | (x13 << 16);\n        x8 = (x8 + x13) | 0;\n        x7 ^= x8;\n        x7 = (x7 >>> (32 - 12)) | (x7 << 12);\n        x3 = (x3 + x4) | 0;\n        x14 ^= x3;\n        x14 = (x14 >>> (32 - 16)) | (x14 << 16);\n        x9 = (x9 + x14) | 0;\n        x4 ^= x9;\n        x4 = (x4 >>> (32 - 12)) | (x4 << 12);\n\n        x2 = (x2 + x7) | 0;\n        x13 ^= x2;\n        x13 = (x13 >>> (32 - 8)) | (x13 << 8);\n        x8 = (x8 + x13) | 0;\n        x7 ^= x8;\n        x7 = (x7 >>> (32 - 7)) | (x7 << 7);\n        x3 = (x3 + x4) | 0;\n        x14 ^= x3;\n        x14 = (x14 >>> (32 - 8)) | (x14 << 8);\n        x9 = (x9 + x14) | 0;\n        x4 ^= x9;\n        x4 = (x4 >>> (32 - 7)) | (x4 << 7);\n\n        x1 = (x1 + x6) | 0;\n        x12 ^= x1;\n        x12 = (x12 >>> (32 - 8)) | (x12 << 8);\n        x11 = (x11 + x12) | 0;\n        x6 ^= x11;\n        x6 = (x6 >>> (32 - 7)) | (x6 << 7);\n        x0 = (x0 + x5) | 0;\n        x15 ^= x0;\n        x15 = (x15 >>> (32 - 8)) | (x15 << 8);\n        x10 = (x10 + x15) | 0;\n        x5 ^= x10;\n        x5 = (x5 >>> (32 - 7)) | (x5 << 7);\n    }\n    writeUint32LE(x0, dst, 0);\n    writeUint32LE(x1, dst, 4);\n    writeUint32LE(x2, dst, 8);\n    writeUint32LE(x3, dst, 12);\n    writeUint32LE(x12, dst, 16);\n    writeUint32LE(x13, dst, 20);\n    writeUint32LE(x14, dst, 24);\n    writeUint32LE(x15, dst, 28);\n    return dst;\n}\n"]}},"error":null,"hash":"0b96aafdb796ea7590f4ff3651947ce9","cacheData":{"env":{}}}