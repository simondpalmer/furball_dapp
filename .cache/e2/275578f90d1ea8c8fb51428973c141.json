{"id":"../node_modules/@ceramicnetwork/common/lib/utils/doctype-utils.js","dependencies":[{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@ceramicnetwork\\common\\lib\\utils\\doctype-utils.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\package.json","includedInParent":true,"mtime":1612734035267},{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@ceramicnetwork\\common\\package.json","includedInParent":true,"mtime":1612644319656},{"name":"cids","loc":{"line":26,"column":39},"parent":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@ceramicnetwork\\common\\lib\\utils\\doctype-utils.js","resolved":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@ceramicnetwork\\common\\node_modules\\cids\\src\\index.js"},{"name":"lodash.clonedeep","loc":{"line":27,"column":51},"parent":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@ceramicnetwork\\common\\lib\\utils\\doctype-utils.js","resolved":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\lodash.clonedeep\\index.js"},{"name":"uint8arrays","loc":{"line":28,"column":33},"parent":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@ceramicnetwork\\common\\lib\\utils\\doctype-utils.js","resolved":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\uint8arrays\\index.js"},{"name":"../doctype","loc":{"line":29,"column":26},"parent":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@ceramicnetwork\\common\\lib\\utils\\doctype-utils.js","resolved":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@ceramicnetwork\\common\\lib\\doctype.js"}],"generated":{"js":"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DoctypeUtils = void 0;\nconst cids_1 = __importDefault(require(\"cids\"));\nconst lodash_clonedeep_1 = __importDefault(require(\"lodash.clonedeep\"));\nconst u8a = __importStar(require(\"uint8arrays\"));\nconst doctype_1 = require(\"../doctype\");\nclass DoctypeUtils {\n    static serializeCommit(commit) {\n        const cloned = lodash_clonedeep_1.default(commit);\n        if (DoctypeUtils.isSignedCommitContainer(cloned)) {\n            cloned.jws.link = cloned.jws.link.toString();\n            cloned.linkedBlock = u8a.toString(cloned.linkedBlock, 'base64');\n            return cloned;\n        }\n        if (DoctypeUtils.isSignedCommit(cloned)) {\n            cloned.link = cloned.link.toString();\n        }\n        if (DoctypeUtils.isAnchorCommit(cloned)) {\n            cloned.proof = cloned.proof.toString();\n        }\n        if (cloned.id) {\n            cloned.id = cloned.id.toString();\n        }\n        if (cloned.prev) {\n            cloned.prev = cloned.prev.toString();\n        }\n        return cloned;\n    }\n    static deserializeCommit(commit) {\n        const cloned = lodash_clonedeep_1.default(commit);\n        if (DoctypeUtils.isSignedCommitContainer(cloned)) {\n            cloned.jws.link = new cids_1.default(cloned.jws.link);\n            cloned.linkedBlock = u8a.fromString(cloned.linkedBlock, 'base64');\n            return cloned;\n        }\n        if (DoctypeUtils.isSignedCommit(cloned)) {\n            cloned.link = new cids_1.default(cloned.link);\n        }\n        if (DoctypeUtils.isAnchorCommit(cloned)) {\n            cloned.proof = new cids_1.default(cloned.proof);\n        }\n        if (cloned.id) {\n            cloned.id = new cids_1.default(cloned.id);\n        }\n        if (cloned.prev) {\n            cloned.prev = new cids_1.default(cloned.prev);\n        }\n        return cloned;\n    }\n    static serializeState(state) {\n        const cloned = lodash_clonedeep_1.default(state);\n        cloned.log = cloned.log.map((entry) => ({ ...entry, cid: entry.cid.toString() }));\n        if (cloned.anchorStatus != null) {\n            cloned.anchorStatus = doctype_1.AnchorStatus[cloned.anchorStatus];\n        }\n        if (cloned.anchorScheduledFor != null) {\n            cloned.anchorScheduledFor = new Date(cloned.anchorScheduledFor).toLocaleString();\n        }\n        if (cloned.anchorProof != null) {\n            cloned.anchorProof.txHash = cloned.anchorProof.txHash.toString();\n            cloned.anchorProof.root = cloned.anchorProof.root.toString();\n        }\n        if (cloned.lastAnchored != null) {\n            cloned.lastAnchored = cloned.lastAnchored.toString();\n        }\n        return cloned;\n    }\n    static deserializeState(state) {\n        const cloned = lodash_clonedeep_1.default(state);\n        cloned.log = cloned.log.map((entry) => ({ ...entry, cid: new cids_1.default(entry.cid) }));\n        if (cloned.anchorProof) {\n            cloned.anchorProof.txHash = new cids_1.default(cloned.anchorProof.txHash);\n            cloned.anchorProof.root = new cids_1.default(cloned.anchorProof.root);\n        }\n        let showScheduledFor = true;\n        if (cloned.anchorStatus) {\n            cloned.anchorStatus = doctype_1.AnchorStatus[cloned.anchorStatus];\n            showScheduledFor = cloned.anchorStatus !== doctype_1.AnchorStatus.FAILED && cloned.anchorStatus !== doctype_1.AnchorStatus.ANCHORED;\n        }\n        if (cloned.anchorScheduledFor) {\n            if (showScheduledFor) {\n                cloned.anchorScheduledFor = Date.parse(cloned.anchorScheduledFor);\n            }\n            else {\n                cloned.anchorScheduledFor = null;\n            }\n        }\n        if (cloned.lastAnchored) {\n            cloned.lastAnchored = new cids_1.default(cloned.lastAnchored);\n        }\n        return cloned;\n    }\n    static statesEqual(state1, state2) {\n        return JSON.stringify(DoctypeUtils.serializeState(state1)) ===\n            JSON.stringify(DoctypeUtils.serializeState(state2));\n    }\n    static makeReadOnly(doctype) {\n        doctype.change = () => {\n            throw new Error('Historical document commits cannot be modified. Load the document without specifying a commit to make updates.');\n        };\n        return doctype;\n    }\n    static async convertCommitToSignedCommitContainer(commit, ipfs) {\n        if (DoctypeUtils.isSignedCommit(commit)) {\n            const block = await ipfs.block.get(commit.link);\n            const linkedBlock = block.data instanceof Uint8Array ? block.data : new Uint8Array(block.data.buffer);\n            return {\n                jws: commit,\n                linkedBlock,\n            };\n        }\n        return commit;\n    }\n    static isSignedCommitContainer(commit) {\n        return commit.jws !== undefined;\n    }\n    static isSignedCommit(commit) {\n        return commit.link !== undefined;\n    }\n    static isAnchorCommit(commit) {\n        return commit.proof !== undefined;\n    }\n}\nexports.DoctypeUtils = DoctypeUtils;\n"},"sourceMaps":{"js":{"version":3,"file":"doctype-utils.js","sourceRoot":"","sources":["../../src/utils/doctype-utils.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"bbbaa3eaa2488e49072a138e3f849d75","cacheData":{"env":{}}}