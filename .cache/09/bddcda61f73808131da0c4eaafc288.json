{"id":"../node_modules/dag-jose-utils/lib/index.js","dependencies":[{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\dag-jose-utils\\lib\\index.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\dag-jose-utils\\src\\index.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\package.json","includedInParent":true,"mtime":1612734035267},{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\dag-jose-utils\\package.json","includedInParent":true,"mtime":1612644319686},{"name":"ipld-dag-cbor","loc":{"line":35,"column":48},"parent":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\dag-jose-utils\\lib\\index.js","resolved":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\dag-jose-utils\\node_modules\\ipld-dag-cbor\\src\\index.js"},{"name":"cids","loc":{"line":36,"column":39},"parent":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\dag-jose-utils\\lib\\index.js","resolved":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\dag-jose-utils\\node_modules\\cids\\src\\index.js"},{"name":"multihashes","loc":{"line":37,"column":46},"parent":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\dag-jose-utils\\lib\\index.js","resolved":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\dag-jose-utils\\node_modules\\multihashes\\src\\index.js"},{"name":"uint8arrays","loc":{"line":38,"column":33},"parent":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\dag-jose-utils\\lib\\index.js","resolved":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\dag-jose-utils\\node_modules\\uint8arrays\\index.js"},{"name":"varint","loc":{"line":39,"column":41},"parent":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\dag-jose-utils\\lib\\index.js","resolved":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\dag-jose-utils\\node_modules\\varint\\index.js"}],"generated":{"js":"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeCleartext = exports.prepareCleartext = exports.decodeIdentityCID = exports.encodeIdentityCID = exports.encodePayload = void 0;\nconst ipld_dag_cbor_1 = __importDefault(require(\"ipld-dag-cbor\"));\nconst cids_1 = __importDefault(require(\"cids\"));\nconst multihashes_1 = __importDefault(require(\"multihashes\"));\nconst u8a = __importStar(require(\"uint8arrays\"));\nconst varint_1 = __importDefault(require(\"varint\"));\nconst DAG_CBOR_CODE = 113;\nconst ID_MULTIHASH = 0;\nconst ENC_BLOCK_SIZE = 24;\nfunction encodePayload(payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const block = new Uint8Array(ipld_dag_cbor_1.default.util.serialize(payload));\n        return {\n            cid: yield ipld_dag_cbor_1.default.util.cid(block),\n            linkedBlock: block,\n        };\n    });\n}\nexports.encodePayload = encodePayload;\nfunction pad(b, blockSize = ENC_BLOCK_SIZE) {\n    const padLen = (blockSize - (b.length % blockSize)) % blockSize;\n    return u8a.concat([b, new Uint8Array(padLen)]);\n}\nfunction unpadCIDBytes(b) {\n    let offset = 0;\n    let mhLen;\n    for (let i = 0; i < 4; i++) {\n        mhLen = varint_1.default.decode(b, offset);\n        offset += varint_1.default.decode.bytes;\n    }\n    return new cids_1.default(b.slice(0, offset + mhLen));\n}\nfunction encodeIdentityCID(obj) {\n    const block = ipld_dag_cbor_1.default.util.serialize(obj);\n    const idMultiHash = multihashes_1.default.encode(block, ID_MULTIHASH);\n    return new cids_1.default(1, DAG_CBOR_CODE, idMultiHash);\n}\nexports.encodeIdentityCID = encodeIdentityCID;\nfunction decodeIdentityCID(cid) {\n    cids_1.default.validateCID(cid);\n    if (cid.code !== DAG_CBOR_CODE)\n        throw new Error('CID codec must be dag-cbor');\n    const { code, digest } = multihashes_1.default.decode(cid.multihash);\n    if (code !== ID_MULTIHASH)\n        throw new Error('CID must use identity multihash');\n    return ipld_dag_cbor_1.default.util.deserialize(digest);\n}\nexports.decodeIdentityCID = decodeIdentityCID;\nfunction prepareCleartext(cleartext, blockSize) {\n    return pad(encodeIdentityCID(cleartext).bytes, blockSize);\n}\nexports.prepareCleartext = prepareCleartext;\nfunction decodeCleartext(b) {\n    return decodeIdentityCID(unpadCIDBytes(b));\n}\nexports.decodeCleartext = decodeCleartext;\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kEAAmC;AACnC,gDAAsB;AACtB,8DAAqC;AACrC,iDAAkC;AAClC,oDAA2B;AAE3B,MAAM,aAAa,GAAG,GAAG,CAAA;AACzB,MAAM,YAAY,GAAG,CAAC,CAAA;AACtB,MAAM,cAAc,GAAG,EAAE,CAAA;AAOzB,SAAsB,aAAa,CAAC,OAA4B;;QAC9D,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,uBAAO,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAA;QAC7D,OAAO;YACL,GAAG,EAAE,MAAM,uBAAO,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;YAClC,WAAW,EAAE,KAAK;SACnB,CAAA;IACH,CAAC;CAAA;AAND,sCAMC;AAED,SAAS,GAAG,CAAC,CAAa,EAAE,SAAS,GAAG,cAAc;IAIpD,MAAM,MAAM,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,MAAM,GAAG,SAAS,CAAC,CAAC,GAAG,SAAS,CAAA;IAG/D,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;AAChD,CAAC;AAED,SAAS,aAAa,CAAC,CAAa;IAGlC,IAAI,MAAM,GAAG,CAAC,CAAA;IACd,IAAI,KAAK,CAAA;IACT,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAC1B,KAAK,GAAG,gBAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAA;QAChC,MAAM,IAAI,gBAAM,CAAC,MAAM,CAAC,KAAK,CAAA;KAC9B;IAED,OAAO,IAAI,cAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC,CAAC,CAAA;AAC5C,CAAC;AAED,SAAgB,iBAAiB,CAAC,GAAwB;IACxD,MAAM,KAAK,GAAG,uBAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;IACzC,MAAM,WAAW,GAAG,qBAAW,CAAC,MAAM,CAAC,KAAK,EAAE,YAAY,CAAC,CAAA;IAC3D,OAAO,IAAI,cAAG,CAAC,CAAC,EAAE,aAAa,EAAE,WAAW,CAAC,CAAA;AAC/C,CAAC;AAJD,8CAIC;AAED,SAAgB,iBAAiB,CAAC,GAAQ;IACxC,cAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAA;IACpB,IAAI,GAAG,CAAC,IAAI,KAAK,aAAa;QAAE,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAA;IAC7E,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,qBAAW,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;IAC1D,IAAI,IAAI,KAAK,YAAY;QAAE,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAA;IAC7E,OAAO,uBAAO,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;AACzC,CAAC;AAND,8CAMC;AAED,SAAgB,gBAAgB,CAAC,SAA8B,EAAE,SAAkB;IACjF,OAAO,GAAG,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,SAAS,CAAC,CAAA;AAC3D,CAAC;AAFD,4CAEC;AAED,SAAgB,eAAe,CAAC,CAAa;IAC3C,OAAO,iBAAiB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAA;AAC5C,CAAC;AAFD,0CAEC","sourcesContent":["import dagCBOR from 'ipld-dag-cbor'\nimport CID from 'cids'\nimport multihashes from 'multihashes'\nimport * as u8a from 'uint8arrays'\nimport varint from 'varint'\n\nconst DAG_CBOR_CODE = 113\nconst ID_MULTIHASH = 0\nconst ENC_BLOCK_SIZE = 24\n\nexport interface EncodedPayload {\n  cid: CID\n  linkedBlock: Uint8Array\n}\n\nexport async function encodePayload(payload: Record<string, any>): Promise<EncodedPayload> {\n  const block = new Uint8Array(dagCBOR.util.serialize(payload))\n  return {\n    cid: await dagCBOR.util.cid(block),\n    linkedBlock: block,\n  }\n}\n\nfunction pad(b: Uint8Array, blockSize = ENC_BLOCK_SIZE): Uint8Array {\n  // Pads with 0s.\n  // Since the multihash defines it's length we don't need any special\n  // method of figuring out which bytes are just padding.\n  const padLen = (blockSize - (b.length % blockSize)) % blockSize\n  // final modulus bs, since if b.length % bs == 24 we don't\n  // want to add another 24 bytes.\n  return u8a.concat([b, new Uint8Array(padLen)])\n}\n\nfunction unpadCIDBytes(b: Uint8Array): CID {\n  // Find where multihash starts.\n  // Multihash lenght is the 4th varint.\n  let offset = 0\n  let mhLen\n  for (let i = 0; i < 4; i++) {\n    mhLen = varint.decode(b, offset)\n    offset += varint.decode.bytes\n  }\n  // Slice padding.\n  return new CID(b.slice(0, offset + mhLen))\n}\n\nexport function encodeIdentityCID(obj: Record<string, any>): CID {\n  const block = dagCBOR.util.serialize(obj)\n  const idMultiHash = multihashes.encode(block, ID_MULTIHASH)\n  return new CID(1, DAG_CBOR_CODE, idMultiHash)\n}\n\nexport function decodeIdentityCID(cid: CID): Record<string, any> {\n  CID.validateCID(cid)\n  if (cid.code !== DAG_CBOR_CODE) throw new Error('CID codec must be dag-cbor')\n  const { code, digest } = multihashes.decode(cid.multihash)\n  if (code !== ID_MULTIHASH) throw new Error('CID must use identity multihash')\n  return dagCBOR.util.deserialize(digest)\n}\n\nexport function prepareCleartext(cleartext: Record<string, any>, blockSize?: number): Uint8Array {\n  return pad(encodeIdentityCID(cleartext).bytes, blockSize)\n}\n\nexport function decodeCleartext(b: Uint8Array): Record<string, any> {\n  return decodeIdentityCID(unpadCIDBytes(b))\n}\n"]}},"error":null,"hash":"b515198c77b9a7a4c4f29d3427034ce4","cacheData":{"env":{}}}