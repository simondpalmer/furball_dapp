{"id":"../node_modules/@stablelib/random/lib/random.js","dependencies":[{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@stablelib\\random\\lib\\random.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@stablelib\\random\\random.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\package.json","includedInParent":true,"mtime":1612734035267},{"name":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@stablelib\\random\\package.json","includedInParent":true,"mtime":1612644319467},{"name":"./source/system","loc":{"line":5,"column":23},"parent":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@stablelib\\random\\lib\\random.js","resolved":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@stablelib\\random\\lib\\source\\system.js"},{"name":"@stablelib/binary","loc":{"line":6,"column":23},"parent":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@stablelib\\random\\lib\\random.js","resolved":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@stablelib\\binary\\lib\\binary.js"},{"name":"@stablelib/wipe","loc":{"line":7,"column":21},"parent":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@stablelib\\random\\lib\\random.js","resolved":"C:\\Users\\Simon Palmer\\Documents\\Programming\\ETHDenver 2021\\furball-dapp\\node_modules\\@stablelib\\wipe\\lib\\wipe.js"}],"generated":{"js":"\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar system_1 = require(\"./source/system\");\nvar binary_1 = require(\"@stablelib/binary\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nexports.defaultRandomSource = new system_1.SystemRandomSource();\nfunction randomBytes(length, prng) {\n    if (prng === void 0) { prng = exports.defaultRandomSource; }\n    return prng.randomBytes(length);\n}\nexports.randomBytes = randomBytes;\n/**\n * Returns a uniformly random unsigned 32-bit integer.\n */\nfunction randomUint32(prng) {\n    if (prng === void 0) { prng = exports.defaultRandomSource; }\n    // Generate 4-byte random buffer.\n    var buf = randomBytes(4, prng);\n    // Convert bytes from buffer into a 32-bit integer.\n    // It's not important which byte order to use, since\n    // the result is random.\n    var result = binary_1.readUint32LE(buf);\n    // Clean the buffer.\n    wipe_1.wipe(buf);\n    return result;\n}\nexports.randomUint32 = randomUint32;\n/** 62 alphanumeric characters for default charset of randomString() */\nvar ALPHANUMERIC = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n/**\n * Returns a uniform random string of the given length\n * with characters from the given charset.\n *\n * Charset must not have more than 256 characters.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nfunction randomString(length, charset, prng) {\n    if (charset === void 0) { charset = ALPHANUMERIC; }\n    if (prng === void 0) { prng = exports.defaultRandomSource; }\n    if (charset.length < 2) {\n        throw new Error(\"randomString charset is too short\");\n    }\n    if (charset.length > 256) {\n        throw new Error(\"randomString charset is too long\");\n    }\n    var out = '';\n    var charsLen = charset.length;\n    var maxByte = 256 - (256 % charsLen);\n    while (length > 0) {\n        var buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);\n        for (var i = 0; i < buf.length && length > 0; i++) {\n            var randomByte = buf[i];\n            if (randomByte < maxByte) {\n                out += charset.charAt(randomByte % charsLen);\n                length--;\n            }\n        }\n        wipe_1.wipe(buf);\n    }\n    return out;\n}\nexports.randomString = randomString;\n/**\n * Returns uniform random string containing at least the given\n * number of bits of entropy.\n *\n * For example, randomStringForEntropy(128) will return a 22-character\n * alphanumeric string, while randomStringForEntropy(128, \"0123456789\")\n * will return a 39-character numeric string, both will contain at\n * least 128 bits of entropy.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nfunction randomStringForEntropy(bits, charset, prng) {\n    if (charset === void 0) { charset = ALPHANUMERIC; }\n    if (prng === void 0) { prng = exports.defaultRandomSource; }\n    var length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));\n    return randomString(length, charset, prng);\n}\nexports.randomStringForEntropy = randomStringForEntropy;\n"},"sourceMaps":{"js":{"version":3,"file":"random.js","sourceRoot":"","sources":["../random.ts"],"names":[],"mappings":";AAAA,sCAAsC;AACtC,6CAA6C;;AAQ7C,0CAAqD;AACrD,4CAAiD;AACjD,wCAAuC;AAI1B,QAAA,mBAAmB,GAAG,IAAI,2BAAkB,EAAE,CAAC;AAE5D,SAAgB,WAAW,CAAC,MAAc,EAAE,IAAwC;IAAxC,qBAAA,EAAA,OAAqB,2BAAmB;IAChF,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AACpC,CAAC;AAFD,kCAEC;AAED;;GAEG;AACH,SAAgB,YAAY,CAAC,IAAwC;IAAxC,qBAAA,EAAA,OAAqB,2BAAmB;IACjE,iCAAiC;IACjC,IAAM,GAAG,GAAG,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IAEjC,mDAAmD;IACnD,oDAAoD;IACpD,wBAAwB;IACxB,IAAM,MAAM,GAAG,qBAAY,CAAC,GAAG,CAAC,CAAC;IAEjC,oBAAoB;IACpB,WAAI,CAAC,GAAG,CAAC,CAAC;IAEV,OAAO,MAAM,CAAC;AAClB,CAAC;AAbD,oCAaC;AAED,uEAAuE;AACvE,IAAM,YAAY,GAAG,gEAAgE,CAAC;AAEtF;;;;;;;;GAQG;AACH,SAAgB,YAAY,CACxB,MAAc,EACd,OAAsB,EACtB,IAAwC;IADxC,wBAAA,EAAA,sBAAsB;IACtB,qBAAA,EAAA,OAAqB,2BAAmB;IAExC,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;QACpB,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;KACxD;IACD,IAAI,OAAO,CAAC,MAAM,GAAG,GAAG,EAAE;QACtB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;KACvD;IACD,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,IAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC;IAChC,IAAM,OAAO,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,QAAQ,CAAC,CAAC;IACvC,OAAO,MAAM,GAAG,CAAC,EAAE;QACf,IAAM,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,GAAG,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC;QACjE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,IAAI,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC/C,IAAM,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,UAAU,GAAG,OAAO,EAAE;gBACtB,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC,UAAU,GAAG,QAAQ,CAAC,CAAC;gBAC7C,MAAM,EAAE,CAAC;aACZ;SACJ;QACD,WAAI,CAAC,GAAG,CAAC,CAAC;KACb;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AA1BD,oCA0BC;AAED;;;;;;;;;;;GAWG;AACH,SAAgB,sBAAsB,CAClC,IAAY,EACZ,OAAsB,EACtB,IAAwC;IADxC,wBAAA,EAAA,sBAAsB;IACtB,qBAAA,EAAA,OAAqB,2BAAmB;IAExC,IAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACvE,OAAO,YAAY,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;AAC/C,CAAC;AAPD,wDAOC","sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package random provides functions to access system's\n * cryptographically secure random byte generator.\n */\n\nimport { RandomSource } from \"./source\";\nimport { SystemRandomSource } from \"./source/system\";\nimport { readUint32LE } from \"@stablelib/binary\";\nimport { wipe } from \"@stablelib/wipe\";\n\nexport { RandomSource } from \"./source\";\n\nexport const defaultRandomSource = new SystemRandomSource();\n\nexport function randomBytes(length: number, prng: RandomSource = defaultRandomSource): Uint8Array {\n    return prng.randomBytes(length);\n}\n\n/**\n * Returns a uniformly random unsigned 32-bit integer.\n */\nexport function randomUint32(prng: RandomSource = defaultRandomSource): number {\n    // Generate 4-byte random buffer.\n    const buf = randomBytes(4, prng);\n\n    // Convert bytes from buffer into a 32-bit integer.\n    // It's not important which byte order to use, since\n    // the result is random.\n    const result = readUint32LE(buf);\n\n    // Clean the buffer.\n    wipe(buf);\n\n    return result;\n}\n\n/** 62 alphanumeric characters for default charset of randomString() */\nconst ALPHANUMERIC = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\n/**\n * Returns a uniform random string of the given length\n * with characters from the given charset.\n *\n * Charset must not have more than 256 characters.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nexport function randomString(\n    length: number,\n    charset = ALPHANUMERIC,\n    prng: RandomSource = defaultRandomSource\n): string {\n    if (charset.length < 2) {\n        throw new Error(\"randomString charset is too short\");\n    }\n    if (charset.length > 256) {\n        throw new Error(\"randomString charset is too long\");\n    }\n    let out = '';\n    const charsLen = charset.length;\n    const maxByte = 256 - (256 % charsLen);\n    while (length > 0) {\n        const buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);\n        for (let i = 0; i < buf.length && length > 0; i++) {\n            const randomByte = buf[i];\n            if (randomByte < maxByte) {\n                out += charset.charAt(randomByte % charsLen);\n                length--;\n            }\n        }\n        wipe(buf);\n    }\n    return out;\n}\n\n/**\n * Returns uniform random string containing at least the given\n * number of bits of entropy.\n *\n * For example, randomStringForEntropy(128) will return a 22-character\n * alphanumeric string, while randomStringForEntropy(128, \"0123456789\")\n * will return a 39-character numeric string, both will contain at\n * least 128 bits of entropy.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nexport function randomStringForEntropy(\n    bits: number,\n    charset = ALPHANUMERIC,\n    prng: RandomSource = defaultRandomSource\n): string {\n    const length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));\n    return randomString(length, charset, prng);\n}\n"]}},"error":null,"hash":"593eed4ab260392a52322ec9df1aed69","cacheData":{"env":{}}}